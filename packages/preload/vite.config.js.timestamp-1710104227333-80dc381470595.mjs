// .electron-vendors.cache.json
var chrome = "98";

// packages/preload/vite.config.js
import { join } from "path";
import { builtinModules } from "module";

// vitest-shared-extensions.config.js
import path from "node:path";
function coverageConfig(packageRoot, packageName) {
  const obj = {
    coverage: {
      all: true,
      clean: true,
      src: [packageRoot],
      exclude: [
        "**/builtin/**",
        "**/cypress/**",
        "**/dist/**",
        "**/node_modules/**",
        "**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}",
        "**/*.{tsx,cjs,js,d.ts}",
        "**/*-info.ts",
        "**/.{cache,git,idea,output,temp,cdix}/**",
        "**/*{karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc,cypress,tailwind,postcss}.config.*"
      ],
      provider: "v8",
      reportsDirectory: path.join(packageRoot, "../../", `test-resources/coverage/${packageName}`),
      reporter: ["lcov", "text"]
    }
  };
  return obj;
}

// packages/preload/vite.config.js
var __vite_injected_original_dirname = "/home/jeremy/documents/kth/bioengine-desktop/packages/preload";
var PACKAGE_ROOT = __vite_injected_original_dirname;
var PACKAGE_NAME = "preload";
var config = {
  mode: process.env.MODE,
  root: PACKAGE_ROOT,
  envDir: process.cwd(),
  resolve: {
    alias: {
      "/@/": join(PACKAGE_ROOT, "src") + "/"
    }
  },
  /*plugins: [
    commonjs({
      dynamicRequireTargets: [
        // include using a glob pattern (either a string or an array of strings)
        'node_modules/ssh2/lib/protocol/crypto/poly1305.js',
      ]
      }),
  ],*/
  build: {
    sourcemap: "inline",
    target: `chrome${chrome}`,
    outDir: "dist",
    assetsDir: ".",
    minify: process.env.MODE !== "development",
    lib: {
      entry: "src/index.ts",
      formats: ["cjs"]
    },
    rollupOptions: {
      external: [
        "electron",
        ...builtinModules.flatMap((p) => [p, `node:${p}`])
      ],
      output: {
        entryFileNames: "[name].cjs"
      }
    },
    emptyOutDir: true,
    reportCompressedSize: false
  },
  test: {
    ...coverageConfig(PACKAGE_ROOT, PACKAGE_NAME)
  }
};
var vite_config_default = config;
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
